import re
import json
from report.models import *

def handle_dc_report(app):
    dc_reports = []
    file_handle = open('outdir/report/' + app +'_dc.json')
    data = json.load(file_handle)

    dependencies = data["dependencies"]
    for dependency in dependencies:
        fileName = str(dependency["fileName"])
        vulnerabilities = []
        try:
            vulnerabilities = dependency["vulnerabilities"]
            for vulnerability in vulnerabilities:
                name = str(vulnerability["name"])
                severity = str(vulnerability["severity"])
                cvssScore = str(vulnerability["cvssScore"])
                description = str(vulnerability["description"])
                dc_reports.append(ReportDc(app_name=app, file_mame=fileName, name=name, severity=severity, cvss_score=cvssScore, description=description))
        except:
            pass
    ReportDc.objects.bulk_create(dc_reports)

def handle_qark_report(app):
    file_handle = open('outdir/report/' + app +'_qark.json')

    qark_reports = []
    for data in json.load(file_handle):
        if not exclude_qark_report(data["name"]):
            severity = data["severity"]
            # tom tat
            name = data["name"]
            # chi tiet
            description = data["description"]
            # ten file bi loi
            file_object = data["file_object"]
            
            index = file_object.find("qark/cfr/")
            if index != -1:
                file_object = file_object[index + 9 : :]
            
            index = file_object.find("qark/procyon/")
            if index != -1:
                file_object = file_object[index + 13 : :]

            index = file_object.find("qark/")
            if index != -1:
                file_object = file_object[index + 5 : :]

            # sua lai thanh save
            qark_reports.append(ReportQark(app_name=app, file_object=file_object, name=name, severity=severity, description=description))
    ReportQark.objects.bulk_create(qark_reports)

def exclude_qark_report(name):
    if name == "Logging found":
        return True
    return False


def handle_sniffgit_report(app):
    f = open('outdir/report/' + app +'_sniffgit.txt')
    data = f.readlines()
    f.close()
    sniffgit_reports = []

    # xoa header de xu ly de dang hon
    for idx, line in enumerate(data):
        if "Exposed sensitive lines found" in line:
            index = idx
            del data[0:idx + 1]
            break

    # lay vi tri cua tung phan
    idx_list = [-1]
    for idx, line in enumerate(data):
        if "\x1b[0m" in line:
            idx_list.append(idx)

    file_name = ""
    for i in range(len(idx_list) - 1):
        str_idx = idx_list[i]
        file_name = data[str_idx + 1].strip().replace("outdir/source/"+ app + "/qark/procyon/", "")
        description = ""
        for description_index in range(str_idx + 2, idx_list[i + 1]):
            match = re.findall('"\w+"', data[description_index])
            if match:
                description += data[description_index][5:].strip()
        
        if "" != description and "" != file_name:
            sniffgit_reports.append(ReportSniffgit(app_name=app, file_name=file_name, description=description))
    
    ReportSniffgit.objects.bulk_create(sniffgit_reports)

def handle_andro_report(app):
    andro_report = ''
    try:
        f = open('outdir/report/' + app + '_andro.txt', 'r')
        andro_report = f.read()
        f.close()
    except:
        pass
    return andro_report