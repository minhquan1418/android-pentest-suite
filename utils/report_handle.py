import re
import json
from report.models import *
import sys, traceback


def handle_dc_report(app):
    dc_reports = []
    file_handle = open('outdir/report/' + app +'_dc.json')
    data = json.load(file_handle)

    dependencies = data["dependencies"]
    for dependency in dependencies:
        fileName = str(dependency["fileName"])
        vulnerabilities = []
        try:
            vulnerabilities = dependency.get("vulnerabilities")
            if vulnerabilities is not None:
                for vulnerability in vulnerabilities:
                    name = str(vulnerability["name"])
                    severity = str(vulnerability["severity"])
                    
                    cvssScore = vulnerability.get("cvssScore")
                    if cvssScore is None:
                        cvssScore = vulnerability.get("cvssv2").get("score")
                    if cvssScore is None:
                        cvssScore = "Unknown"
                    cvssScore = str(cvssScore)

                    description = str(vulnerability["description"])
                    dc_reports.append(ReportDc(app_name=app, file_object=fileName, name=name, severity=severity, cvss_score=cvssScore, description=description))
        except:
            traceback.print_exc(file=sys.stdout)
    
    # tranh dc chay lai khi khong co dong nao
    dc_reports.append(ReportDc(app_name=app, file_object='', name='', severity='', cvss_score='', description=''))
    ReportDc.objects.bulk_create(dc_reports)

def handle_qark_report(app):
    file_handle = open('outdir/report/' + app +'_qark.json')

    qark_reports = []
    for data in json.load(file_handle):
        if not exclude_qark_report(data["name"]):
            severity = data["severity"]
            # tom tat
            name = data["name"]
            # chi tiet
            description = data["description"]
            # ten file bi loi
            file_object = data["file_object"]
            
            index = file_object.find("qark/cfr/")
            if index != -1:
                file_object = file_object[index + 9 : :]
            
            index = file_object.find("qark/procyon/")
            if index != -1:
                file_object = file_object[index + 13 : :]

            index = file_object.find("qark/")
            if index != -1:
                file_object = file_object[index + 5 : :]

            # sua lai thanh save
            qark_reports.append(ReportQark(app_name=app, file_object=file_object, name=name, severity=severity, description=description))
    ReportQark.objects.bulk_create(qark_reports)

def exclude_qark_report(name):
    if name == "Logging found":
        return True
    return False


def handle_sniffgit_report(app):
    f = open('outdir/report/' + app +'_sniffgit.txt')
    data = f.readlines()
    f.close()
    sniffgit_reports = []

    # xoa header de xu ly de dang hon
    for idx, line in enumerate(data):
        if "Exposed sensitive lines found" in line:
            index = idx
            del data[0:idx + 1]
            break

    # lay vi tri cua tung phan
    idx_list = [-1]
    for idx, line in enumerate(data):
        if "\x1b[0m" in line:
            idx_list.append(idx)

    file_name = ""
    for i in range(len(idx_list) - 1):
        str_idx = idx_list[i]
        file_name = data[str_idx + 1].strip().replace("outdir/source/"+ app + "/qark/procyon/", "")
        description = ""
        for description_index in range(str_idx + 2, idx_list[i + 1]):
            match = re.findall('"\w+"', data[description_index])
            if match:
                description += data[description_index][5:].strip()
        
        if "" != description and "" != file_name:
            sniffgit_reports.append(ReportSniffgit(app_name=app, file_name=file_name, description=description))
    
    ReportSniffgit.objects.bulk_create(sniffgit_reports)



# private
def find_end(lines):
    for idx, line in enumerate(reversed(lines)):
        if "AndroBugs analyzing time" in line:
            return len(lines) - 2 - idx


def handle_andro_report(app):
    andro_reports = []
    try:
        f = open('outdir/report/' + app + '_andro.txt', 'r')
        lines = f.readlines()
        f.close()

        head_id_list = []
        for idx, line in enumerate(lines):
            if "[Critical]" in line or "[Warning]" in line or "[Notice]" in line or "[Info]" in line:
                head_id_list.append(idx)

        head_id_list.append(find_end(lines))

        for i in range(len(head_id_list) - 1):
            name = lines[head_id_list[i]]
            description = ''
            severity = ''

            for id_line in range(head_id_list[i] + 1, head_id_list[i + 1]):
                description = description + lines[id_line]
            
            if "[Critical]" in name:
                severity = 'Critical'
            if "[Warning]" in name:
                severity = 'Warning'
            if "[Notice]" in name or "[Info]" in name:
                severity = 'Info'
            
            andro_reports.append(ReportAndro(app_name=app, severity=severity, name=name, description=description))
        ReportAndro.objects.bulk_create(andro_reports)
    except:
        pass


def count_andro_severity(app):
    crit = 0
    warn = 0
    info = 0

    try:
        f = open('outdir/report/' + app + '_andro.txt', 'r')
        lines = f.readlines()
        f.close()

        for line in lines:
            if "[Critical]" in line:
                crit = crit + 1
            if "[Warning]" in line or "[Notice]" in line:
                warn = warn + 1
            if "[Info]" in line:
                info = info + 1
    except:
        pass
    
    return [crit, warn, info]


def list_sniffgit_file(app):
    reports = []
    for row in ReportSniffgit.objects.filter(app_name=app).all():
        report = {
            'line' : ' '.join(map(str, row.description.split(' ')[ : 2 ])),
            'file' : row.file_name.split(' ')[3]
        }
        reports.append(report)
    return reports